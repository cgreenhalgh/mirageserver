First explorations with Mirage, towards creating simple web application(s).
Initially based on the mirage-tutorial Http server example (stripped down
and commented).

Initially just with the unix-socket target option as far as the build is
concerned.

References:
- mirage, https://github.com/avsm/mirage
- mirage-tutorial, https://github.com/avsm/mirage-tutorial

Chris Greenhalgh, University of Nottingham, 2011.

So basic server works. 

It seems that HTTP POST body handling is not currently supported in core mirage (in 
lib/http/request.ml). I have tried to fix this in my fork, so you'll probably need
that for now...
https://github.com/cgreenhalgh/mirage on the branch 
https://github.com/cgreenhalgh/mirage/tree/httprequestfix

However I have found another issue: no useful persistent data storage currently
supported. The slightly crazy route I am considering here is:

1: Implement a new I/O & storage abstraction, building on discussions with Mort 
and emails from Anil 

=> first cut in endpoint.ml, with a first concrete implementation
over OS.Devices.Blkif in blkendpoint.ml.

Note: for blkendpoint.mir:
For unix-socket you will need to create a file for the VBD, e.g. 
  dd if=/dev/zero of=test.vbd bs=1024 count=1024
and then specify it on the command-line when running the app, e.g. 
  ./_build/unix-socket/blkifendpoint.bin -vbd test:test.vbd

2: Implement a simple no-sql storage system using this on top of the low-level
block interface (something perhaps a bit like Amazon SimpleDB or CouchDB)

3: carry on implementing game server...

Game Server next steps:

Exercise 2: a simple location-based 'game' server.
2.1: Allow client(s) to create 'session's, tagged with name, location name, 
lat/long/radius, timeout.
Allow client(s) to search for sessions (all, eventually by location/range).

2.2: Allow client(s) to publish their existence/location in a session with
name, lat/long, timeout.
Allow client(s) to query a session for info from other client(s).

2.3: allow client(s) to subscribe/resubscribe to changes in a session, 
with timeout.
Allow client(s) to poll for changes.

